package kotlin.collections;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy.2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareByDescending.1;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\000â\002\n\000\n\002\020\013\n\000\n\002\020\034\n\000\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020$\n\002\b\003\n\002\030\002\n\002\b\005\n\002\020%\n\002\b\005\n\002\020\006\n\002\020\005\n\002\b\002\n\002\020\007\n\000\n\002\020\b\n\000\n\002\020\t\n\000\n\002\020\n\n\002\b\002\n\002\020 \n\002\b\t\n\002\030\002\n\002\b\003\n\002\020\036\n\002\b\023\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\037\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\005\n\002\020\000\n\002\b\023\n\002\030\002\n\002\b\006\n\002\020\002\n\002\b\006\n\002\020!\n\000\n\002\030\002\n\002\b\006\n\002\020\"\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020\r\n\002\b\006\n\002\020\016\n\002\b\f\n\002\020\017\n\002\b\006\n\002\030\002\n\002\030\002\n\002\b\007\n\002\020\021\n\002\b\032\n\002\030\002\n\002\b\027\n\002\020\030\n\000\n\002\020\022\n\000\n\002\020\031\n\002\020\f\n\002\b\002\n\002\020\023\n\000\n\002\020\024\n\000\n\002\030\002\n\002\030\002\n\000\n\002\020\025\n\002\b\002\n\002\020\026\n\002\b\002\n\002\020#\n\002\b\002\n\002\020\027\n\000\n\002\030\002\n\002\030\002\n\002\b\005\n\002\030\002\n\002\b\006\032-\020\000\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\026\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\037\020\007\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\b\032\034\020\b\032\b\022\004\022\002H\0020\t\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032Q\020\n\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\b\032?\020\020\032\016\022\004\022\002H\f\022\004\022\002H\0020\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032Y\020\020\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b\032Z\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\0020\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b¢\006\002\020\027\032t\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b¢\006\002\020\030\032l\020\031\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\b¢\006\002\020\027\032\027\020\032\032\0020\033*\b\022\004\022\0020\0340\003H\007¢\006\002\b\035\032\027\020\032\032\0020\033*\b\022\004\022\0020\0330\003H\007¢\006\002\b\036\032\027\020\032\032\0020\033*\b\022\004\022\0020\0370\003H\007¢\006\002\b \032\027\020\032\032\0020\033*\b\022\004\022\0020!0\003H\007¢\006\002\b\"\032\027\020\032\032\0020\033*\b\022\004\022\0020#0\003H\007¢\006\002\b$\032\027\020\032\032\0020\033*\b\022\004\022\0020%0\003H\007¢\006\002\b&\032,\020'\032\016\022\n\022\b\022\004\022\002H\0020(0(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020)\032\0020!H\007\032F\020'\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\006\020)\032\0020!2\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020(\022\004\022\002H*0\005H\007\032\036\020+\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(H\n¢\006\002\020,\032\036\020-\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(H\n¢\006\002\020,\032\036\020.\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(H\n¢\006\002\020,\032\036\020/\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(H\n¢\006\002\020,\032\036\0200\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(H\n¢\006\002\020,\032+\0201\032\0020\001\"\t\b\000\020\002¢\006\002\b2*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002H\002¢\006\002\0204\032\031\0205\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\00206H\b\032\026\0205\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\0205\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\034\0207\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0329\0208\032\b\022\004\022\002H\0020(\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\0209\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032$\020:\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020;\032\0020!\032$\020<\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020;\032\0020!\0323\020=\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\0323\020>\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032#\020?\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020@\032\0020!¢\006\002\020A\032&\020?\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020@\032\0020!H\b¢\006\002\020B\0327\020C\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020@\032\0020!2\022\020D\032\016\022\004\022\0020!\022\004\022\002H\0020\005¢\006\002\020E\032:\020C\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020@\032\0020!2\022\020D\032\016\022\004\022\0020!\022\004\022\002H\0020\005H\b¢\006\002\020F\032%\020G\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020@\032\0020!¢\006\002\020A\032(\020G\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020@\032\0020!H\b¢\006\002\020B\0323\020H\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032H\020I\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020\004\032#\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\004\022\0020\0010JH\b\032a\020M\032\002HN\"\004\b\000\020\002\"\020\b\001\020N*\n\022\006\b\000\022\002H\0020O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2'\020\004\032#\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\004\022\0020\0010JH\b¢\006\002\020P\032$\020Q\032\r\022\t\022\007H*¢\006\002\bR0(\"\006\b\000\020*\030\001*\006\022\002\b\0030\003H\b\032(\020Q\032\b\022\004\022\002H*0(\"\004\b\000\020**\006\022\002\b\0030\0032\f\020S\032\b\022\004\022\002H*0T\0328\020U\032\002HN\"\006\b\000\020*\030\001\"\020\b\001\020N*\n\022\006\b\000\022\002H*0O*\006\022\002\b\0030\0032\006\020\026\032\002HNH\b¢\006\002\020V\032A\020U\032\002HN\"\020\b\000\020N*\n\022\006\b\000\022\002H*0O\"\004\b\001\020**\006\022\002\b\0030\0032\006\020\026\032\002HN2\f\020S\032\b\022\004\022\002H*0T¢\006\002\020W\0323\020X\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\"\020Y\032\b\022\004\022\002H\0020(\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032;\020[\032\002HN\"\020\b\000\020N*\n\022\006\b\000\022\002H\0020O\"\b\b\001\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\0032\006\020\026\032\002HN¢\006\002\020V\032L\020\\\032\002HN\"\004\b\000\020\002\"\020\b\001\020N*\n\022\006\b\000\022\002H\0020O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020]\032L\020^\032\002HN\"\004\b\000\020\002\"\020\b\001\020N*\n\022\006\b\000\022\002H\0020O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020]\0324\020_\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\0324\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\0324\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020b\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0322\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\032\035\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0324\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\035\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\032?\020f\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H*0\0030\005H\b\032X\020g\032\002HN\"\004\b\000\020\002\"\004\b\001\020*\"\020\b\002\020N*\n\022\006\b\000\022\002H*0O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H*0\0030\005H\b¢\006\002\020]\032U\020h\032\002H*\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\006\020i\032\002H*2'\020j\032#\022\023\022\021H*¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H\002\022\004\022\002H*0JH\b¢\006\002\020l\032j\020m\032\002H*\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\006\020i\032\002H*2<\020j\0328\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\023\022\021H*¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H\002\022\004\022\002H*0nH\b¢\006\002\020o\032U\020p\032\002H*\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020(2\006\020i\032\002H*2'\020j\032#\022\004\022\002H\002\022\023\022\021H*¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H*0JH\b¢\006\002\020q\032j\020r\032\002H*\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020(2\006\020i\032\002H*2<\020j\0328\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\023\022\021H*¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H*0nH\b¢\006\002\020s\032-\020t\032\0020u\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020v\032\016\022\004\022\002H\002\022\004\022\0020u0\005H\b\032B\020w\032\0020u\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020v\032#\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\004\022\0020u0JH\b\032:\020x\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020@\032\0020!2\022\020D\032\016\022\004\022\0020!\022\004\022\002H\0020\005H\b¢\006\002\020F\032%\020y\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020@\032\0020!¢\006\002\020B\032E\020z\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\0020(0\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032_\020z\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\r0(0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b\032^\020{\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\034\b\002\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\0020|0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b¢\006\002\020\027\032x\020{\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\034\b\003\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\r0|0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b¢\006\002\020\030\032A\020}\032\016\022\004\022\002H\002\022\004\022\002H\f0~\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\024\b\004\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032)\020\032\0020!\"\t\b\000\020\002¢\006\002\b2*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002¢\006\003\020\001\032+\020\032\0020!\"\t\b\000\020\002¢\006\002\b2*\b\022\004\022\002H\0020(2\006\0203\032\002H\002H\007¢\006\003\020\001\032.\020\001\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032.\020\001\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032.\020\001\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032.\020\001\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\0320\020\001\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032\001\020\001\032\003H\001\"\004\b\000\020\002\"\017\b\001\020\001*\b0\001j\003`\001*\b\022\004\022\002H\0020\0032\b\020\001\032\003H\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\t\b\002\020\001\032\0020!2\n\b\002\020\001\032\0030\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030\001\030\0010\005¢\006\003\020\001\032l\020\001\032\0030\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\t\b\002\020\001\032\0020!2\n\b\002\020\001\032\0030\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030\001\030\0010\005\032\034\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0323\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\034\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\0323\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020b\032*\020\001\032\0020!\"\t\b\000\020\002¢\006\002\b2*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002¢\006\003\020\001\032,\020\001\032\0020!\"\t\b\000\020\002¢\006\002\b2*\b\022\004\022\002H\0020(2\006\0203\032\002H\002H\007¢\006\003\020\001\032\036\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0325\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\036\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\0325\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020b\032:\020\001\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H*0\005H\b\032O\020\001\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032'\020\016\032#\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\004\022\002H*0JH\b\032U\020\001\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\b\b\001\020**\0020Z*\b\022\004\022\002H\0020\0032)\020\016\032%\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\006\022\004\030\001H*0JH\b\032n\020\001\032\002HN\"\004\b\000\020\002\"\b\b\001\020**\0020Z\"\020\b\002\020N*\n\022\006\b\000\022\002H*0O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2)\020\016\032%\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\006\022\004\030\001H*0JH\b¢\006\002\020P\032h\020\001\032\002HN\"\004\b\000\020\002\"\004\b\001\020*\"\020\b\002\020N*\n\022\006\b\000\022\002H*0O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2'\020\016\032#\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\004\022\002H*0JH\b¢\006\002\020P\032@\020\001\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\b\b\001\020**\0020Z*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b\032Y\020\001\032\002HN\"\004\b\000\020\002\"\b\b\001\020**\0020Z\"\020\b\002\020N*\n\022\006\b\000\022\002H*0O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b¢\006\002\020]\032S\020\001\032\002HN\"\004\b\000\020\002\"\004\b\001\020*\"\020\b\002\020N*\n\022\006\b\000\022\002H*0O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN2\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H*0\005H\b¢\006\002\020]\032*\020 \001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020\003¢\006\003\020¢\001\032\033\020 \001\032\004\030\0010\033*\b\022\004\022\0020\0330\003H\007¢\006\003\020£\001\032\033\020 \001\032\004\030\0010\037*\b\022\004\022\0020\0370\003H\007¢\006\003\020¤\001\032F\020¥\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020\0032\022\0209\032\016\022\004\022\002H\002\022\004\022\002H*0\005H\b¢\006\002\020`\032>\020¦\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020§\001\032\030\022\006\b\000\022\002H\0020¨\001j\013\022\006\b\000\022\002H\002`©\001¢\006\003\020ª\001\032*\020«\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020\003¢\006\003\020¢\001\032\033\020«\001\032\004\030\0010\033*\b\022\004\022\0020\0330\003H\007¢\006\003\020£\001\032\033\020«\001\032\004\030\0010\037*\b\022\004\022\0020\0370\003H\007¢\006\003\020¤\001\032F\020¬\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020\0032\022\0209\032\016\022\004\022\002H\002\022\004\022\002H*0\005H\b¢\006\002\020`\032>\020­\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020§\001\032\030\022\006\b\000\022\002H\0020¨\001j\013\022\006\b\000\022\002H\002`©\001¢\006\003\020ª\001\032.\020®\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002H\002¢\006\003\020¯\001\0328\020®\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020°\001\032\013\022\006\b\001\022\002H\0020±\001H\002¢\006\003\020²\001\032/\020®\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020°\001\032\b\022\004\022\002H\0020\003H\002\032/\020®\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020°\001\032\b\022\004\022\002H\0020\tH\002\032.\020³\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002H\b¢\006\003\020¯\001\032\027\020´\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032.\020´\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032>\020µ\001\032\002HN\"\004\b\000\020\002\"\016\b\001\020N*\b\022\004\022\002H\0020\003*\002HN2\022\020v\032\016\022\004\022\002H\002\022\004\022\0020u0\005H\b¢\006\003\020¶\001\032F\020·\001\032\032\022\n\022\b\022\004\022\002H\0020(\022\n\022\b\022\004\022\002H\0020(0\017\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032.\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\002062\006\0203\032\002H\002H\002¢\006\003\020¹\001\0328\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\002062\020\020°\001\032\013\022\006\b\001\022\002H\0020±\001H\002¢\006\003\020º\001\032/\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\002062\r\020°\001\032\b\022\004\022\002H\0020\003H\002\032/\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\002062\r\020°\001\032\b\022\004\022\002H\0020\tH\002\032.\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002H\002¢\006\003\020¯\001\0328\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020°\001\032\013\022\006\b\001\022\002H\0020±\001H\002¢\006\003\020²\001\032/\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020°\001\032\b\022\004\022\002H\0020\003H\002\032/\020¸\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020°\001\032\b\022\004\022\002H\0020\tH\002\032.\020»\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\002062\006\0203\032\002H\002H\b¢\006\003\020¹\001\032.\020»\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0203\032\002H\002H\b¢\006\003\020¯\001\032X\020¼\001\032\003H½\001\"\005\b\000\020½\001\"\t\b\001\020\002*\003H½\001*\b\022\004\022\002H\0020\0032)\020j\032%\022\024\022\022H½\001¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H\002\022\005\022\003H½\0010JH\b¢\006\003\020¾\001\032m\020¿\001\032\003H½\001\"\005\b\000\020½\001\"\t\b\001\020\002*\003H½\001*\b\022\004\022\002H\0020\0032>\020j\032:\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\024\022\022H½\001¢\006\f\bK\022\b\bL\022\004\b\b(k\022\004\022\002H\002\022\005\022\003H½\0010nH\b¢\006\003\020À\001\032X\020Á\001\032\003H½\001\"\005\b\000\020½\001\"\t\b\001\020\002*\003H½\001*\b\022\004\022\002H\0020(2)\020j\032%\022\004\022\002H\002\022\024\022\022H½\001¢\006\f\bK\022\b\bL\022\004\b\b(k\022\005\022\003H½\0010JH\b¢\006\003\020Â\001\032m\020Ã\001\032\003H½\001\"\005\b\000\020½\001\"\t\b\001\020\002*\003H½\001*\b\022\004\022\002H\0020(2>\020j\032:\022\023\022\0210!¢\006\f\bK\022\b\bL\022\004\b\b(@\022\004\022\002H\002\022\024\022\022H½\001¢\006\f\bK\022\b\bL\022\004\b\b(k\022\005\022\003H½\0010nH\b¢\006\003\020Ä\001\032#\020Å\001\032\b\022\004\022\002H\0020\003\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032#\020Å\001\032\b\022\004\022\002H\0020(\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020(\032\027\020Æ\001\032\0020u\"\004\b\000\020\002*\b\022\004\022\002H\0020|\032\035\020Ç\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\034\020È\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0323\020È\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\034\020È\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\032\036\020É\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0325\020É\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020`\032\036\020É\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020(¢\006\002\020,\032,\020Ê\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\r\020Ë\001\032\b\022\004\022\0020!0\003\032'\020Ê\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\b\020Ë\001\032\0030Ì\001\032C\020Í\001\032\0020u\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020|2\026\b\004\0209\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b\032C\020Î\001\032\0020u\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020|2\026\b\004\0209\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b\032\"\020Ï\001\032\0020u\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020|\032(\020Ð\001\032\b\022\004\022\002H\0020(\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020\003\032I\020Ñ\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020\0032\026\b\004\0209\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b\032I\020Ò\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002\"\017\b\001\020**\t\022\004\022\002H*0¡\001*\b\022\004\022\002H\0020\0032\026\b\004\0209\032\020\022\004\022\002H\002\022\006\022\004\030\001H*0\005H\b\032(\020Ó\001\032\b\022\004\022\002H\0020(\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020\003\032<\020Ô\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020§\001\032\030\022\006\b\000\022\002H\0020¨\001j\013\022\006\b\000\022\002H\002`©\001\0320\020Õ\001\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032\031\020Ö\001\032\0020!*\b\022\004\022\0020\0340\003H\007¢\006\003\b×\001\032\031\020Ö\001\032\0020\033*\b\022\004\022\0020\0330\003H\007¢\006\003\bØ\001\032\031\020Ö\001\032\0020\037*\b\022\004\022\0020\0370\003H\007¢\006\003\bÙ\001\032\031\020Ö\001\032\0020!*\b\022\004\022\0020!0\003H\007¢\006\003\bÚ\001\032\031\020Ö\001\032\0020#*\b\022\004\022\0020#0\003H\007¢\006\003\bÛ\001\032\031\020Ö\001\032\0020!*\b\022\004\022\0020%0\003H\007¢\006\003\bÜ\001\032.\020Ý\001\032\0020!\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\0209\032\016\022\004\022\002H\002\022\004\022\0020!0\005H\b\032.\020Þ\001\032\0020\033\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\0209\032\016\022\004\022\002H\002\022\004\022\0020\0330\005H\b\032%\020ß\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020;\032\0020!\032%\020à\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\006\020;\032\0020!\0324\020á\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020(2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\0324\020â\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\022\020ã\001\032\0030ä\001*\b\022\004\022\0020\00106\032\022\020å\001\032\0030æ\001*\b\022\004\022\0020\03406\032\023\020ç\001\032\0030è\001*\t\022\005\022\0030é\00106\0326\020ê\001\032\002HN\"\004\b\000\020\002\"\020\b\001\020N*\n\022\006\b\000\022\002H\0020O*\b\022\004\022\002H\0020\0032\006\020\026\032\002HN¢\006\002\020V\032\022\020ë\001\032\0030ì\001*\b\022\004\022\0020\03306\032\022\020í\001\032\0030î\001*\b\022\004\022\0020\03706\032)\020ï\001\032\024\022\004\022\002H\0020ð\001j\t\022\004\022\002H\002`ñ\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020ò\001\032\0030ó\001*\b\022\004\022\0020!06\032\035\020ô\001\032\b\022\004\022\002H\0020(\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020õ\001\032\0030ö\001*\b\022\004\022\0020#06\032\035\020÷\001\032\b\022\004\022\002H\0020|\"\004\b\000\020\002*\b\022\004\022\002H\00206\032\035\020÷\001\032\b\022\004\022\002H\0020|\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020ø\001\032\t\022\004\022\002H\0020ù\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020ú\001\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020û\001\032\0030ü\001*\b\022\004\022\0020%06\0324\020ý\001\032\024\022\004\022\002H\0020þ\001j\t\022\004\022\002H\002`ÿ\001\"\017\b\000\020\002*\t\022\004\022\002H\0020¡\001*\b\022\004\022\002H\0020\003\032H\020ý\001\032\024\022\004\022\002H\0020þ\001j\t\022\004\022\002H\002`ÿ\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020§\001\032\030\022\006\b\000\022\002H\0020¨\001j\013\022\006\b\000\022\002H\002`©\001\0320\020\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032C\020\002\032\016\022\n\022\b\022\004\022\002H\0020(0(\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020)\032\0020!2\t\b\002\020\002\032\0020!2\t\b\002\020\002\032\0020\001H\007\032]\020\002\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\006\020)\032\0020!2\t\b\002\020\002\032\0020!2\t\b\002\020\002\032\0020\0012\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020(\022\004\022\002H*0\005H\007\032$\020\002\032\017\022\013\022\t\022\004\022\002H\0020\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032J\020\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H*0\0170(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H*0±\001H\004¢\006\003\020²\001\032~\020\002\032\b\022\004\022\002H\r0(\"\004\b\000\020\002\"\004\b\001\020*\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H*0±\00128\020\016\0324\022\024\022\022H\002¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\024\022\022H*¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\004\022\002H\r0JH\b¢\006\003\020\002\032A\020\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H*0\0170(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H*0\003H\004\032u\020\002\032\b\022\004\022\002H\r0(\"\004\b\000\020\002\"\004\b\001\020*\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H*0\00328\020\016\0324\022\024\022\022H\002¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\024\022\022H*¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\004\022\002H\r0JH\b\032+\020\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H\0020\0170(\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\007\032`\020\002\032\b\022\004\022\002H*0(\"\004\b\000\020\002\"\004\b\001\020**\b\022\004\022\002H\0020\00328\020\016\0324\022\024\022\022H\002¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\024\022\022H\002¢\006\r\bK\022\t\bL\022\005\b\b(\002\022\004\022\002H*0JH\b¨\006\002"}, d2={"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "klass", "Ljava/lang/Class;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "(Ljava/lang/Iterable;Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "reverse", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "toSortedSet", "Ljava/util/SortedSet;", "Lkotlin/collections/SortedSet;", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 9}, xi=1, xs="kotlin/collections/CollectionsKt")
class CollectionsKt___CollectionsKt
  extends CollectionsKt__ReversedViewsKt
{
  public CollectionsKt___CollectionsKt() {}
  
  public static final <T> boolean all(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (!((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  public static final <T> boolean any(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty() ^ true;
    }
    return paramIterable.iterator().hasNext();
  }
  
  public static final <T> boolean any(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return false;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return true;
      }
    }
    return false;
  }
  
  @InlineOnly
  private static final <T> Iterable<T> asIterable(@NotNull Iterable<? extends T> paramIterable)
  {
    return paramIterable;
  }
  
  @NotNull
  public static final <T> Sequence<T> asSequence(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    (Sequence)new Sequence()
    {
      @NotNull
      public Iterator<T> iterator()
      {
        return receiver$0$inlined.iterator();
      }
    };
  }
  
  @NotNull
  public static final <T, K, V> Map<K, V> associate(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Pair localPair = (Pair)paramFunction1.invoke(paramIterable.next());
      localMap.put(localPair.getFirst(), localPair.getSecond());
    }
    return localMap;
  }
  
  @NotNull
  public static final <T, K> Map<K, T> associateBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction1.invoke(localObject), localObject);
    }
    return localMap;
  }
  
  @NotNull
  public static final <T, K, V> Map<K, V> associateBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends K> paramFunction1, @NotNull Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "valueTransform");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction1.invoke(localObject), paramFunction11.invoke(localObject));
    }
    return localMap;
  }
  
  @NotNull
  public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Iterable<? extends T> paramIterable, @NotNull M paramM, @NotNull Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramM, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramM.put(paramFunction1.invoke(localObject), localObject);
    }
    return paramM;
  }
  
  @NotNull
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Iterable<? extends T> paramIterable, @NotNull M paramM, @NotNull Function1<? super T, ? extends K> paramFunction1, @NotNull Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramM, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "valueTransform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramM.put(paramFunction1.invoke(localObject), paramFunction11.invoke(localObject));
    }
    return paramM;
  }
  
  @NotNull
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Iterable<? extends T> paramIterable, @NotNull M paramM, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramM, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Pair localPair = (Pair)paramFunction1.invoke(paramIterable.next());
      paramM.put(localPair.getFirst(), localPair.getSecond());
    }
    return paramM;
  }
  
  @JvmName(name="averageOfByte")
  public static final double averageOfByte(@NotNull Iterable<Byte> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).byteValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @JvmName(name="averageOfDouble")
  public static final double averageOfDouble(@NotNull Iterable<Double> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).doubleValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @JvmName(name="averageOfFloat")
  public static final double averageOfFloat(@NotNull Iterable<Float> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).floatValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @JvmName(name="averageOfInt")
  public static final double averageOfInt(@NotNull Iterable<Integer> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).intValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @JvmName(name="averageOfLong")
  public static final double averageOfLong(@NotNull Iterable<Long> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).longValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @JvmName(name="averageOfShort")
  public static final double averageOfShort(@NotNull Iterable<Short> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    double d = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d += ((Number)paramIterable.next()).shortValue();
      i += 1;
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    return d / i;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> List<List<T>> chunked(@NotNull Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return CollectionsKt.windowed(paramIterable, paramInt, paramInt, true);
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> List<R> chunked(@NotNull Iterable<? extends T> paramIterable, int paramInt, @NotNull Function1<? super List<? extends T>, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    return CollectionsKt.windowed(paramIterable, paramInt, paramInt, true, paramFunction1);
  }
  
  @InlineOnly
  private static final <T> T component1(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.get(0);
  }
  
  @InlineOnly
  private static final <T> T component2(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.get(1);
  }
  
  @InlineOnly
  private static final <T> T component3(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.get(2);
  }
  
  @InlineOnly
  private static final <T> T component4(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.get(3);
  }
  
  @InlineOnly
  private static final <T> T component5(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.get(4);
  }
  
  public static final <T> boolean contains(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).contains(paramT);
    }
    return CollectionsKt.indexOf(paramIterable, paramT) >= 0;
  }
  
  public static final <T> int count(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).size();
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      paramIterable.next();
      i += 1;
    }
    return i;
  }
  
  public static final <T> int count(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    boolean bool = paramIterable instanceof Collection;
    int i = 0;
    if ((bool) && (((Collection)paramIterable).isEmpty())) {
      return 0;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        i += 1;
      }
    }
    return i;
  }
  
  @InlineOnly
  private static final <T> int count(@NotNull Collection<? extends T> paramCollection)
  {
    return paramCollection.size();
  }
  
  @NotNull
  public static final <T> List<T> distinct(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return CollectionsKt.toList((Iterable)CollectionsKt.toMutableSet(paramIterable));
  }
  
  @NotNull
  public static final <T, K> List<T> distinctBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    HashSet localHashSet = new HashSet();
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (localHashSet.add(paramFunction1.invoke(localObject))) {
        localArrayList.add(localObject);
      }
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> drop(@NotNull Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    int j = 0;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == 0)
    {
      paramIterable = new StringBuilder();
      paramIterable.append("Requested element count ");
      paramIterable.append(paramInt);
      paramIterable.append(" is less than zero.");
      throw ((Throwable)new IllegalArgumentException(paramIterable.toString().toString()));
    }
    if (paramInt == 0) {
      return CollectionsKt.toList(paramIterable);
    }
    Object localObject2;
    Object localObject1;
    if ((paramIterable instanceof Collection))
    {
      i = ((Collection)paramIterable).size() - paramInt;
      if (i <= 0) {
        return CollectionsKt.emptyList();
      }
      if (i == 1) {
        return CollectionsKt.listOf(CollectionsKt.last(paramIterable));
      }
      localObject2 = new ArrayList(i);
      localObject1 = localObject2;
      if ((paramIterable instanceof List))
      {
        if ((paramIterable instanceof RandomAccess))
        {
          paramIterable = (List)paramIterable;
          i = paramIterable.size();
          while (paramInt < i)
          {
            ((ArrayList)localObject2).add(paramIterable.get(paramInt));
            paramInt += 1;
          }
        }
        paramIterable = (Iterator)((List)paramIterable).listIterator(paramInt);
        while (paramIterable.hasNext()) {
          ((ArrayList)localObject2).add(paramIterable.next());
        }
        return (List)localObject2;
      }
    }
    else
    {
      localObject1 = new ArrayList();
    }
    paramIterable = paramIterable.iterator();
    int i = j;
    while (paramIterable.hasNext())
    {
      localObject2 = paramIterable.next();
      if (i >= paramInt) {
        ((ArrayList)localObject1).add(localObject2);
      }
      i += 1;
    }
    return CollectionsKt.optimizeReadOnlyList((List)localObject1);
  }
  
  @NotNull
  public static final <T> List<T> dropLast(@NotNull List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == 0)
    {
      paramList = new StringBuilder();
      paramList.append("Requested element count ");
      paramList.append(paramInt);
      paramList.append(" is less than zero.");
      throw ((Throwable)new IllegalArgumentException(paramList.toString().toString()));
    }
    return CollectionsKt.take((Iterable)paramList, RangesKt.coerceAtLeast(paramList.size() - paramInt, 0));
  }
  
  @NotNull
  public static final <T> List<T> dropLastWhile(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (!paramList.isEmpty())
    {
      ListIterator localListIterator = paramList.listIterator(paramList.size());
      while (localListIterator.hasPrevious()) {
        if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue()) {
          return CollectionsKt.take((Iterable)paramList, localListIterator.nextIndex() + 1);
        }
      }
    }
    return CollectionsKt.emptyList();
  }
  
  @NotNull
  public static final <T> List<T> dropWhile(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i != 0)
      {
        localArrayList.add(localObject);
      }
      else if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        localArrayList.add(localObject);
        i = 1;
      }
    }
    return (List)localArrayList;
  }
  
  public static final <T> T elementAt(@NotNull Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).get(paramInt);
    }
    CollectionsKt.elementAtOrElse(paramIterable, paramInt, (Function1)new Lambda(paramInt)
    {
      @NotNull
      public final Void invoke(int paramAnonymousInt)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Collection doesn't contain element at index ");
        localStringBuilder.append($index);
        localStringBuilder.append('.');
        throw ((Throwable)new IndexOutOfBoundsException(localStringBuilder.toString()));
      }
    });
  }
  
  @InlineOnly
  private static final <T> T elementAt(@NotNull List<? extends T> paramList, int paramInt)
  {
    return paramList.get(paramInt);
  }
  
  public static final <T> T elementAtOrElse(@NotNull Iterable<? extends T> paramIterable, int paramInt, @NotNull Function1<? super Integer, ? extends T> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "defaultValue");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramIterable))) {
        return paramIterable.get(paramInt);
      }
      return paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    if (paramInt < 0) {
      return paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return localObject;
      }
      i += 1;
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  @InlineOnly
  private static final <T> T elementAtOrElse(@NotNull List<? extends T> paramList, int paramInt, Function1<? super Integer, ? extends T> paramFunction1)
  {
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  @Nullable
  public static final <T> T elementAtOrNull(@NotNull Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return CollectionsKt.getOrNull((List)paramIterable, paramInt);
    }
    if (paramInt < 0) {
      return null;
    }
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return localObject;
      }
      i += 1;
    }
    return null;
  }
  
  @InlineOnly
  private static final <T> T elementAtOrNull(@NotNull List<? extends T> paramList, int paramInt)
  {
    return CollectionsKt.getOrNull(paramList, paramInt);
  }
  
  @NotNull
  public static final <T> List<T> filter(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T> List<T> filterIndexed(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super Integer, ? super T, Boolean> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
      i += 1;
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function2<? super Integer, ? super T, Boolean> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "predicate");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), localObject)).booleanValue()) {
        paramC.add(localObject);
      }
      i += 1;
    }
    return paramC;
  }
  
  private static final <R> List<R> filterIsInstance(@NotNull Iterable<?> paramIterable)
  {
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      Intrinsics.reifiedOperationMarker(3, "R");
      if ((localObject instanceof Object)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <R> List<R> filterIsInstance(@NotNull Iterable<?> paramIterable, @NotNull Class<R> paramClass)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramClass, "klass");
    return (List)CollectionsKt.filterIsInstanceTo(paramIterable, (Collection)new ArrayList(), paramClass);
  }
  
  private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Iterable<?> paramIterable, C paramC)
  {
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      Intrinsics.reifiedOperationMarker(3, "R");
      if ((localObject instanceof Object)) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @NotNull
  public static final <C extends Collection<? super R>, R> C filterIsInstanceTo(@NotNull Iterable<?> paramIterable, @NotNull C paramC, @NotNull Class<R> paramClass)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramClass, "klass");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (paramClass.isInstance(localObject)) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @NotNull
  public static final <T> List<T> filterNot(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T> List<T> filterNotNull(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return (List)CollectionsKt.filterNotNullTo(paramIterable, (Collection)new ArrayList());
  }
  
  @NotNull
  public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (localObject != null) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @NotNull
  public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @NotNull
  public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @InlineOnly
  private static final <T> T find(@NotNull Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  @InlineOnly
  private static final <T> T findLast(@NotNull Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  @InlineOnly
  private static final <T> T findLast(@NotNull List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  public static final <T> T first(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return CollectionsKt.first((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      throw ((Throwable)new NoSuchElementException("Collection is empty."));
    }
    return paramIterable.next();
  }
  
  public static final <T> T first(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    throw ((Throwable)new NoSuchElementException("Collection contains no element matching the predicate."));
  }
  
  public static final <T> T first(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramList.isEmpty()) {
      throw ((Throwable)new NoSuchElementException("List is empty."));
    }
    return paramList.get(0);
  }
  
  @Nullable
  public static final <T> T firstOrNull(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if (paramIterable.isEmpty()) {
        return null;
      }
      return paramIterable.get(0);
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    return paramIterable.next();
  }
  
  @Nullable
  public static final <T> T firstOrNull(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  @Nullable
  public static final <T> T firstOrNull(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramList.isEmpty()) {
      return null;
    }
    return paramList.get(0);
  }
  
  @NotNull
  public static final <T, R> List<R> flatMap(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends Iterable<? extends R>> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(localCollection, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function1<? super T, ? extends Iterable<? extends R>> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(paramC, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return paramC;
  }
  
  public static final <T, R> R fold(@NotNull Iterable<? extends T> paramIterable, R paramR, @NotNull Function2<? super R, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramR = paramFunction2.invoke(paramR, paramIterable.next());
    }
    return paramR;
  }
  
  public static final <T, R> R foldIndexed(@NotNull Iterable<? extends T> paramIterable, R paramR, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    paramIterable = paramIterable.iterator();
    int j;
    for (int i = 0; paramIterable.hasNext(); i = j)
    {
      Object localObject = paramIterable.next();
      j = i + 1;
      paramR = paramFunction3.invoke(Integer.valueOf(i), paramR, localObject);
    }
    return paramR;
  }
  
  public static final <T, R> R foldRight(@NotNull List<? extends T> paramList, R paramR, @NotNull Function2<? super T, ? super R, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    R ? = paramR;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        ? = paramR;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramR = paramFunction2.invoke(paramList.previous(), paramR);
      }
    }
    return ?;
  }
  
  public static final <T, R> R foldRightIndexed(@NotNull List<? extends T> paramList, R paramR, @NotNull Function3<? super Integer, ? super T, ? super R, ? extends R> paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    R ? = paramR;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        ? = paramR;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramR = paramFunction3.invoke(Integer.valueOf(paramList.previousIndex()), paramList.previous(), paramR);
      }
    }
    return ?;
  }
  
  @HidesMembers
  public static final <T> void forEach(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Unit> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "action");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramFunction1.invoke(paramIterable.next());
    }
  }
  
  public static final <T> void forEachIndexed(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super Integer, ? super T, Unit> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "action");
    paramIterable = paramIterable.iterator();
    int j;
    for (int i = 0; paramIterable.hasNext(); i = j)
    {
      Object localObject = paramIterable.next();
      j = i + 1;
      paramFunction2.invoke(Integer.valueOf(i), localObject);
    }
  }
  
  @InlineOnly
  private static final <T> T getOrElse(@NotNull List<? extends T> paramList, int paramInt, Function1<? super Integer, ? extends T> paramFunction1)
  {
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  @Nullable
  public static final <T> T getOrNull(@NotNull List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return null;
  }
  
  @NotNull
  public static final <T, K> Map<K, List<T>> groupBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Map localMap = (Map)new LinkedHashMap();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Object localObject3 = paramFunction1.invoke(localObject2);
      Object localObject1 = localMap.get(localObject3);
      paramIterable = localObject1;
      if (localObject1 == null)
      {
        paramIterable = new ArrayList();
        localMap.put(localObject3, paramIterable);
      }
      ((List)paramIterable).add(localObject2);
    }
    return localMap;
  }
  
  @NotNull
  public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends K> paramFunction1, @NotNull Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "valueTransform");
    Map localMap = (Map)new LinkedHashMap();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Object localObject3 = paramFunction1.invoke(localObject2);
      Object localObject1 = localMap.get(localObject3);
      paramIterable = localObject1;
      if (localObject1 == null)
      {
        paramIterable = new ArrayList();
        localMap.put(localObject3, paramIterable);
      }
      ((List)paramIterable).add(paramFunction11.invoke(localObject2));
    }
    return localMap;
  }
  
  @NotNull
  public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Iterable<? extends T> paramIterable, @NotNull M paramM, @NotNull Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramM, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Object localObject3 = paramFunction1.invoke(localObject2);
      Object localObject1 = paramM.get(localObject3);
      paramIterable = localObject1;
      if (localObject1 == null)
      {
        paramIterable = new ArrayList();
        paramM.put(localObject3, paramIterable);
      }
      ((List)paramIterable).add(localObject2);
    }
    return paramM;
  }
  
  @NotNull
  public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Iterable<? extends T> paramIterable, @NotNull M paramM, @NotNull Function1<? super T, ? extends K> paramFunction1, @NotNull Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramM, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "valueTransform");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Object localObject3 = paramFunction1.invoke(localObject2);
      Object localObject1 = paramM.get(localObject3);
      paramIterable = localObject1;
      if (localObject1 == null)
      {
        paramIterable = new ArrayList();
        paramM.put(localObject3, paramIterable);
      }
      ((List)paramIterable).add(paramFunction11.invoke(localObject2));
    }
    return paramM;
  }
  
  @SinceKotlin(version="1.1")
  @NotNull
  public static final <T, K> Grouping<T, K> groupingBy(@NotNull Iterable<? extends T> paramIterable, @NotNull final Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    (Grouping)new Grouping()
    {
      public K keyOf(T paramAnonymousT)
      {
        return paramFunction1.invoke(paramAnonymousT);
      }
      
      @NotNull
      public Iterator<T> sourceIterator()
      {
        return receiver$0.iterator();
      }
    };
  }
  
  public static final <T> int indexOf(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).indexOf(paramT);
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      if (Intrinsics.areEqual(paramT, paramIterable.next())) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final <T> int indexOf(@NotNull List<? extends T> paramList, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.indexOf(paramT);
  }
  
  public static final <T> int indexOfFirst(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final <T> int indexOfFirst(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.iterator();
    int i = 0;
    while (paramList.hasNext())
    {
      if (((Boolean)paramFunction1.invoke(paramList.next())).booleanValue()) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final <T> int indexOfLast(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    int j = -1;
    int i = 0;
    while (paramIterable.hasNext())
    {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        j = i;
      }
      i += 1;
    }
    return j;
  }
  
  public static final <T> int indexOfLast(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious()) {
      if (((Boolean)paramFunction1.invoke(paramList.previous())).booleanValue()) {
        return paramList.nextIndex();
      }
    }
    return -1;
  }
  
  @NotNull
  public static final <T> Set<T> intersect(@NotNull Iterable<? extends T> paramIterable1, @NotNull Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.retainAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  @NotNull
  public static final <T, A extends Appendable> A joinTo(@NotNull Iterable<? extends T> paramIterable, @NotNull A paramA, @NotNull CharSequence paramCharSequence1, @NotNull CharSequence paramCharSequence2, @NotNull CharSequence paramCharSequence3, int paramInt, @NotNull CharSequence paramCharSequence4, @Nullable Function1<? super T, ? extends CharSequence> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramA, "buffer");
    Intrinsics.checkParameterIsNotNull(paramCharSequence1, "separator");
    Intrinsics.checkParameterIsNotNull(paramCharSequence2, "prefix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence3, "postfix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence4, "truncated");
    paramA.append(paramCharSequence2);
    paramIterable = paramIterable.iterator();
    int i = 0;
    int j;
    for (;;)
    {
      j = i;
      if (!paramIterable.hasNext()) {
        break;
      }
      paramCharSequence2 = paramIterable.next();
      i += 1;
      if (i > 1) {
        paramA.append(paramCharSequence1);
      }
      if (paramInt >= 0)
      {
        j = i;
        if (i > paramInt) {
          break;
        }
      }
      StringsKt.appendElement(paramA, paramCharSequence2, paramFunction1);
    }
    if ((paramInt >= 0) && (j > paramInt)) {
      paramA.append(paramCharSequence4);
    }
    paramA.append(paramCharSequence3);
    return paramA;
  }
  
  @NotNull
  public static final <T> String joinToString(@NotNull Iterable<? extends T> paramIterable, @NotNull CharSequence paramCharSequence1, @NotNull CharSequence paramCharSequence2, @NotNull CharSequence paramCharSequence3, int paramInt, @NotNull CharSequence paramCharSequence4, @Nullable Function1<? super T, ? extends CharSequence> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramCharSequence1, "separator");
    Intrinsics.checkParameterIsNotNull(paramCharSequence2, "prefix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence3, "postfix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence4, "truncated");
    paramIterable = ((StringBuilder)CollectionsKt.joinTo(paramIterable, (Appendable)new StringBuilder(), paramCharSequence1, paramCharSequence2, paramCharSequence3, paramInt, paramCharSequence4, paramFunction1)).toString();
    Intrinsics.checkExpressionValueIsNotNull(paramIterable, "joinTo(StringBuilder(), …ed, transform).toString()");
    return paramIterable;
  }
  
  public static final <T> T last(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return CollectionsKt.last((List)paramIterable);
    }
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      throw ((Throwable)new NoSuchElementException("Collection is empty."));
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
    return paramIterable;
  }
  
  public static final <T> T last(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    int i = 0;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        i = 1;
        paramIterable = localObject;
      }
    }
    if (i == 0) {
      throw ((Throwable)new NoSuchElementException("Collection contains no element matching the predicate."));
    }
    return paramIterable;
  }
  
  public static final <T> T last(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramList.isEmpty()) {
      throw ((Throwable)new NoSuchElementException("List is empty."));
    }
    return paramList.get(CollectionsKt.getLastIndex(paramList));
  }
  
  public static final <T> T last(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    throw ((Throwable)new NoSuchElementException("List contains no element matching the predicate."));
  }
  
  public static final <T> int lastIndexOf(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).lastIndexOf(paramT);
    }
    int j = -1;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      if (Intrinsics.areEqual(paramT, paramIterable.next())) {
        j = i;
      }
      i += 1;
    }
    return j;
  }
  
  public static final <T> int lastIndexOf(@NotNull List<? extends T> paramList, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    return paramList.lastIndexOf(paramT);
  }
  
  @Nullable
  public static final <T> T lastOrNull(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if (paramIterable.isEmpty()) {
        return null;
      }
      return paramIterable.get(paramIterable.size() - 1);
    }
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
    return paramIterable;
  }
  
  @Nullable
  public static final <T> T lastOrNull(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  @Nullable
  public static final <T> T lastOrNull(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramList.isEmpty()) {
      return null;
    }
    return paramList.get(paramList.size() - 1);
  }
  
  @Nullable
  public static final <T> T lastOrNull(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  @NotNull
  public static final <T, R> List<R> map(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localCollection.add(paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, R> List<R> mapIndexed(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    int j;
    for (int i = 0; paramIterable.hasNext(); i = j)
    {
      Object localObject = paramIterable.next();
      j = i + 1;
      localCollection.add(paramFunction2.invoke(Integer.valueOf(i), localObject));
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, R> List<R> mapIndexedNotNull(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction2.invoke(Integer.valueOf(i), paramIterable.next());
      if (localObject != null) {
        localCollection.add(localObject);
      }
      i += 1;
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction2.invoke(Integer.valueOf(i), paramIterable.next());
      if (localObject != null) {
        paramC.add(localObject);
      }
      i += 1;
    }
    return paramC;
  }
  
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    paramIterable = paramIterable.iterator();
    int j;
    for (int i = 0; paramIterable.hasNext(); i = j)
    {
      Object localObject = paramIterable.next();
      j = i + 1;
      paramC.add(paramFunction2.invoke(Integer.valueOf(i), localObject));
    }
    return paramC;
  }
  
  @NotNull
  public static final <T, R> List<R> mapNotNull(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramC.add(paramFunction1.invoke(paramIterable.next()));
    }
    return paramC;
  }
  
  @Nullable
  public static final <T extends Comparable<? super T>> T max(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) < 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  @SinceKotlin(version="1.1")
  @Nullable
  public static final Double max(@NotNull Iterable<Double> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    double d2 = ((Number)paramIterable.next()).doubleValue();
    double d1 = d2;
    if (Double.isNaN(d2)) {
      return Double.valueOf(d2);
    }
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).doubleValue();
      if (Double.isNaN(d2)) {
        return Double.valueOf(d2);
      }
      if (d1 < d2) {
        d1 = d2;
      }
    }
    return Double.valueOf(d1);
  }
  
  @SinceKotlin(version="1.1")
  @Nullable
  public static final Float max(@NotNull Iterable<Float> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    float f2 = ((Number)paramIterable.next()).floatValue();
    float f1 = f2;
    if (Float.isNaN(f2)) {
      return Float.valueOf(f2);
    }
    while (paramIterable.hasNext())
    {
      f2 = ((Number)paramIterable.next()).floatValue();
      if (Float.isNaN(f2)) {
        return Float.valueOf(f2);
      }
      if (f1 < f2) {
        f1 = f2;
      }
    }
    return Float.valueOf(f1);
  }
  
  @Nullable
  public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    Object localObject1 = (Comparable)paramFunction1.invoke(paramIterable);
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject2);
      if (((Comparable)localObject1).compareTo(localComparable) < 0)
      {
        paramIterable = localObject2;
        localObject1 = localComparable;
      }
    }
    return paramIterable;
  }
  
  @Nullable
  public static final <T> T maxWith(@NotNull Iterable<? extends T> paramIterable, @NotNull Comparator<? super T> paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) < 0) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  @Nullable
  public static final <T extends Comparable<? super T>> T min(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) > 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  @SinceKotlin(version="1.1")
  @Nullable
  public static final Double min(@NotNull Iterable<Double> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    double d2 = ((Number)paramIterable.next()).doubleValue();
    double d1 = d2;
    if (Double.isNaN(d2)) {
      return Double.valueOf(d2);
    }
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).doubleValue();
      if (Double.isNaN(d2)) {
        return Double.valueOf(d2);
      }
      if (d1 > d2) {
        d1 = d2;
      }
    }
    return Double.valueOf(d1);
  }
  
  @SinceKotlin(version="1.1")
  @Nullable
  public static final Float min(@NotNull Iterable<Float> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    float f2 = ((Number)paramIterable.next()).floatValue();
    float f1 = f2;
    if (Float.isNaN(f2)) {
      return Float.valueOf(f2);
    }
    while (paramIterable.hasNext())
    {
      f2 = ((Number)paramIterable.next()).floatValue();
      if (Float.isNaN(f2)) {
        return Float.valueOf(f2);
      }
      if (f1 > f2) {
        f1 = f2;
      }
    }
    return Float.valueOf(f1);
  }
  
  @Nullable
  public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    Object localObject1 = (Comparable)paramFunction1.invoke(paramIterable);
    while (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject2);
      if (((Comparable)localObject1).compareTo(localComparable) > 0)
      {
        paramIterable = localObject2;
        localObject1 = localComparable;
      }
    }
    return paramIterable;
  }
  
  @Nullable
  public static final <T> T minWith(@NotNull Iterable<? extends T> paramIterable, @NotNull Comparator<? super T> paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) > 0) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  @NotNull
  public static final <T> List<T> minus(@NotNull Iterable<? extends T> paramIterable1, @NotNull Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "elements");
    paramIterable2 = CollectionsKt.convertToSetForSetOperationWith(paramIterable2, paramIterable1);
    if (paramIterable2.isEmpty()) {
      return CollectionsKt.toList(paramIterable1);
    }
    Collection localCollection = (Collection)new ArrayList();
    paramIterable1 = paramIterable1.iterator();
    while (paramIterable1.hasNext())
    {
      Object localObject = paramIterable1.next();
      if (!paramIterable2.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T> List<T> minus(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    ArrayList localArrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    int j = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      int m = 1;
      int k = j;
      int i = m;
      if (j == 0)
      {
        k = j;
        i = m;
        if (Intrinsics.areEqual(localObject, paramT))
        {
          k = 1;
          i = 0;
        }
      }
      j = k;
      if (i != 0)
      {
        ((Collection)localArrayList).add(localObject);
        j = k;
      }
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> minus(@NotNull Iterable<? extends T> paramIterable, @NotNull Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    paramSequence = SequencesKt.toHashSet(paramSequence);
    if (paramSequence.isEmpty()) {
      return CollectionsKt.toList(paramIterable);
    }
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramSequence.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @NotNull
  public static final <T> List<T> minus(@NotNull Iterable<? extends T> paramIterable, @NotNull T[] paramArrayOfT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramArrayOfT, "elements");
    int i;
    if (paramArrayOfT.length == 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return CollectionsKt.toList(paramIterable);
    }
    paramArrayOfT = ArraysKt.toHashSet(paramArrayOfT);
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramArrayOfT.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  @InlineOnly
  private static final <T> List<T> minusElement(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    return CollectionsKt.minus(paramIterable, paramT);
  }
  
  public static final <T> boolean none(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty();
    }
    return paramIterable.iterator().hasNext() ^ true;
  }
  
  public static final <T> boolean none(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  @SinceKotlin(version="1.1")
  @NotNull
  public static final <T, C extends Iterable<? extends T>> C onEach(@NotNull C paramC, @NotNull Function1<? super T, Unit> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramC, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "action");
    Iterator localIterator = paramC.iterator();
    while (localIterator.hasNext()) {
      paramFunction1.invoke(localIterator.next());
    }
    return paramC;
  }
  
  @NotNull
  public static final <T> Pair<List<T>, List<T>> partition(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localArrayList1.add(localObject);
      } else {
        localArrayList2.add(localObject);
      }
    }
    return new Pair(localArrayList1, localArrayList2);
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Iterable<? extends T> paramIterable1, @NotNull Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "elements");
    if ((paramIterable1 instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable1, paramIterable2);
    }
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt.addAll(localCollection, paramIterable1);
    CollectionsKt.addAll(localCollection, paramIterable2);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable, paramT);
    }
    ArrayList localArrayList = new ArrayList();
    CollectionsKt.addAll((Collection)localArrayList, paramIterable);
    localArrayList.add(paramT);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Iterable<? extends T> paramIterable, @NotNull Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt.addAll(localCollection, paramIterable);
    CollectionsKt.addAll(localCollection, paramSequence);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Iterable<? extends T> paramIterable, @NotNull T[] paramArrayOfT)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramArrayOfT, "elements");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable, paramArrayOfT);
    }
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt.addAll(localCollection, paramIterable);
    CollectionsKt.addAll(localCollection, paramArrayOfT);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Collection<? extends T> paramCollection, @NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable, "elements");
    if ((paramIterable instanceof Collection))
    {
      int i = paramCollection.size();
      Collection localCollection = (Collection)paramIterable;
      paramIterable = new ArrayList(i + localCollection.size());
      paramIterable.addAll(paramCollection);
      paramIterable.addAll(localCollection);
      return (List)paramIterable;
    }
    paramCollection = new ArrayList(paramCollection);
    CollectionsKt.addAll((Collection)paramCollection, paramIterable);
    return (List)paramCollection;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Collection<? extends T> paramCollection, T paramT)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 1);
    localArrayList.addAll(paramCollection);
    localArrayList.add(paramT);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Collection<? extends T> paramCollection, @NotNull Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 10);
    localArrayList.addAll(paramCollection);
    CollectionsKt.addAll((Collection)localArrayList, paramSequence);
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> plus(@NotNull Collection<? extends T> paramCollection, @NotNull T[] paramArrayOfT)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramArrayOfT, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + paramArrayOfT.length);
    localArrayList.addAll(paramCollection);
    CollectionsKt.addAll((Collection)localArrayList, paramArrayOfT);
    return (List)localArrayList;
  }
  
  @InlineOnly
  private static final <T> List<T> plusElement(@NotNull Iterable<? extends T> paramIterable, T paramT)
  {
    return CollectionsKt.plus(paramIterable, paramT);
  }
  
  @InlineOnly
  private static final <T> List<T> plusElement(@NotNull Collection<? extends T> paramCollection, T paramT)
  {
    return CollectionsKt.plus(paramCollection, paramT);
  }
  
  public static final <S, T extends S> S reduce(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super S, ? super T, ? extends S> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      throw ((Throwable)new UnsupportedOperationException("Empty collection can't be reduced."));
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = paramFunction2.invoke(paramIterable, localIterator.next())) {}
    return paramIterable;
  }
  
  public static final <S, T extends S> S reduceIndexed(@NotNull Iterable<? extends T> paramIterable, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      throw ((Throwable)new UnsupportedOperationException("Empty collection can't be reduced."));
    }
    paramIterable = localIterator.next();
    int j;
    for (int i = 1; localIterator.hasNext(); i = j)
    {
      j = i + 1;
      paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, localIterator.next());
    }
    return paramIterable;
  }
  
  public static final <S, T extends S> S reduceRight(@NotNull List<? extends T> paramList, @NotNull Function2<? super T, ? super S, ? extends S> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (!localListIterator.hasPrevious()) {
      throw ((Throwable)new UnsupportedOperationException("Empty list can't be reduced."));
    }
    for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction2.invoke(localListIterator.previous(), paramList)) {}
    return paramList;
  }
  
  public static final <S, T extends S> S reduceRightIndexed(@NotNull List<? extends T> paramList, @NotNull Function3<? super Integer, ? super T, ? super S, ? extends S> paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (!localListIterator.hasPrevious()) {
      throw ((Throwable)new UnsupportedOperationException("Empty list can't be reduced."));
    }
    for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction3.invoke(Integer.valueOf(localListIterator.previousIndex()), localListIterator.previous(), paramList)) {}
    return paramList;
  }
  
  @NotNull
  public static final <T> Iterable<T> requireNoNulls(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Object localObject = paramIterable.iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((Iterator)localObject).next() == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("null element found in ");
        ((StringBuilder)localObject).append(paramIterable);
        ((StringBuilder)localObject).append('.');
        throw ((Throwable)new IllegalArgumentException(((StringBuilder)localObject).toString()));
      }
    }
    return paramIterable;
  }
  
  @NotNull
  public static final <T> List<T> requireNoNulls(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Object localObject = paramList.iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((Iterator)localObject).next() == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("null element found in ");
        ((StringBuilder)localObject).append(paramList);
        ((StringBuilder)localObject).append('.');
        throw ((Throwable)new IllegalArgumentException(((StringBuilder)localObject).toString()));
      }
    }
    return paramList;
  }
  
  public static final <T> void reverse(@NotNull List<T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Collections.reverse(paramList);
  }
  
  @NotNull
  public static final <T> List<T> reversed(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).size() <= 1)) {
      return CollectionsKt.toList(paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.reverse(paramIterable);
    return paramIterable;
  }
  
  public static final <T> T single(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof List)) {
      return CollectionsKt.single((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      throw ((Throwable)new NoSuchElementException("Collection is empty."));
    }
    Object localObject = paramIterable.next();
    if (paramIterable.hasNext()) {
      throw ((Throwable)new IllegalArgumentException("Collection has more than one element."));
    }
    return localObject;
  }
  
  public static final <T> T single(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    int i = 0;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        if (i != 0) {
          throw ((Throwable)new IllegalArgumentException("Collection contains more than one matching element."));
        }
        i = 1;
        paramIterable = localObject;
      }
    }
    if (i == 0) {
      throw ((Throwable)new NoSuchElementException("Collection contains no element matching the predicate."));
    }
    return paramIterable;
  }
  
  public static final <T> T single(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    switch (paramList.size())
    {
    default: 
      throw ((Throwable)new IllegalArgumentException("List has more than one element."));
    case 1: 
      return paramList.get(0);
    }
    throw ((Throwable)new NoSuchElementException("List is empty."));
  }
  
  @Nullable
  public static final <T> T singleOrNull(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    boolean bool = paramIterable instanceof List;
    Object localObject = null;
    if (bool)
    {
      List localList = (List)paramIterable;
      paramIterable = localObject;
      if (localList.size() == 1) {
        paramIterable = localList.get(0);
      }
      return paramIterable;
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    localObject = paramIterable.next();
    if (paramIterable.hasNext()) {
      return null;
    }
    return localObject;
  }
  
  @Nullable
  public static final <T> T singleOrNull(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    int i = 0;
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        if (i != 0) {
          return null;
        }
        i = 1;
        paramIterable = localObject;
      }
    }
    if (i == 0) {
      return null;
    }
    return paramIterable;
  }
  
  @Nullable
  public static final <T> T singleOrNull(@NotNull List<? extends T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramList.size() == 1) {
      return paramList.get(0);
    }
    return null;
  }
  
  @NotNull
  public static final <T> List<T> slice(@NotNull List<? extends T> paramList, @NotNull Iterable<Integer> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable, "indices");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 10);
    if (i == 0) {
      return CollectionsKt.emptyList();
    }
    ArrayList localArrayList = new ArrayList(i);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localArrayList.add(paramList.get(((Number)paramIterable.next()).intValue()));
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> slice(@NotNull List<? extends T> paramList, @NotNull IntRange paramIntRange)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIntRange, "indices");
    if (paramIntRange.isEmpty()) {
      return CollectionsKt.emptyList();
    }
    return CollectionsKt.toList((Iterable)paramList.subList(paramIntRange.getStart().intValue(), paramIntRange.getEndInclusive().intValue() + 1));
  }
  
  public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull List<T> paramList, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
    }
  }
  
  public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull List<T> paramList, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
    }
  }
  
  public static final <T extends Comparable<? super T>> void sortDescending(@NotNull List<T> paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    CollectionsKt.sortWith(paramList, ComparisonsKt.reverseOrder());
  }
  
  @NotNull
  public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      if (localCollection.size() <= 1) {
        return CollectionsKt.toList(paramIterable);
      }
      paramIterable = localCollection.toArray(new Comparable[0]);
      if (paramIterable == null) {
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      if (paramIterable == null) {
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      paramIterable = (Comparable[])paramIterable;
      if (paramIterable == null) {
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
      }
      paramIterable = (Object[])paramIterable;
      ArraysKt.sort(paramIterable);
      return ArraysKt.asList(paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.sort(paramIterable);
    return paramIterable;
  }
  
  @NotNull
  public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    return CollectionsKt.sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
  }
  
  @NotNull
  public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    return CollectionsKt.sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
  }
  
  @NotNull
  public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return CollectionsKt.sortedWith(paramIterable, ComparisonsKt.reverseOrder());
  }
  
  @NotNull
  public static final <T> List<T> sortedWith(@NotNull Iterable<? extends T> paramIterable, @NotNull Comparator<? super T> paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      if (localCollection.size() <= 1) {
        return CollectionsKt.toList(paramIterable);
      }
      paramIterable = localCollection.toArray(new Object[0]);
      if (paramIterable == null) {
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      if (paramIterable == null) {
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      ArraysKt.sortWith(paramIterable, paramComparator);
      return ArraysKt.asList(paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.sortWith(paramIterable, paramComparator);
    return paramIterable;
  }
  
  @NotNull
  public static final <T> Set<T> subtract(@NotNull Iterable<? extends T> paramIterable1, @NotNull Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.removeAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final <T> int sumBy(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Integer> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramFunction1.invoke(paramIterable.next())).intValue();
    }
    return i;
  }
  
  public static final <T> double sumByDouble(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    for (double d = 0.0D; paramIterable.hasNext(); d += ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue()) {}
    return d;
  }
  
  @JvmName(name="sumOfByte")
  public static final int sumOfByte(@NotNull Iterable<Byte> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).byteValue();
    }
    return i;
  }
  
  @JvmName(name="sumOfDouble")
  public static final double sumOfDouble(@NotNull Iterable<Double> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    for (double d = 0.0D; paramIterable.hasNext(); d += ((Number)paramIterable.next()).doubleValue()) {}
    return d;
  }
  
  @JvmName(name="sumOfFloat")
  public static final float sumOfFloat(@NotNull Iterable<Float> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    for (float f = 0.0F; paramIterable.hasNext(); f += ((Number)paramIterable.next()).floatValue()) {}
    return f;
  }
  
  @JvmName(name="sumOfInt")
  public static final int sumOfInt(@NotNull Iterable<Integer> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).intValue();
    }
    return i;
  }
  
  @JvmName(name="sumOfLong")
  public static final long sumOfLong(@NotNull Iterable<Long> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    for (long l = 0L; paramIterable.hasNext(); l += ((Number)paramIterable.next()).longValue()) {}
    return l;
  }
  
  @JvmName(name="sumOfShort")
  public static final int sumOfShort(@NotNull Iterable<Short> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).shortValue();
    }
    return i;
  }
  
  @NotNull
  public static final <T> List<T> take(@NotNull Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    int j = 0;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == 0)
    {
      paramIterable = new StringBuilder();
      paramIterable.append("Requested element count ");
      paramIterable.append(paramInt);
      paramIterable.append(" is less than zero.");
      throw ((Throwable)new IllegalArgumentException(paramIterable.toString().toString()));
    }
    if (paramInt == 0) {
      return CollectionsKt.emptyList();
    }
    if ((paramIterable instanceof Collection))
    {
      if (paramInt >= ((Collection)paramIterable).size()) {
        return CollectionsKt.toList(paramIterable);
      }
      if (paramInt == 1) {
        return CollectionsKt.listOf(CollectionsKt.first(paramIterable));
      }
    }
    ArrayList localArrayList = new ArrayList(paramInt);
    paramIterable = paramIterable.iterator();
    int i = j;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i == paramInt) {
        break;
      }
      localArrayList.add(localObject);
      i += 1;
    }
    return CollectionsKt.optimizeReadOnlyList((List)localArrayList);
  }
  
  @NotNull
  public static final <T> List<T> takeLast(@NotNull List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == 0)
    {
      paramList = new StringBuilder();
      paramList.append("Requested element count ");
      paramList.append(paramInt);
      paramList.append(" is less than zero.");
      throw ((Throwable)new IllegalArgumentException(paramList.toString().toString()));
    }
    if (paramInt == 0) {
      return CollectionsKt.emptyList();
    }
    int i = paramList.size();
    if (paramInt >= i) {
      return CollectionsKt.toList((Iterable)paramList);
    }
    if (paramInt == 1) {
      return CollectionsKt.listOf(CollectionsKt.last(paramList));
    }
    ArrayList localArrayList = new ArrayList(paramInt);
    if ((paramList instanceof RandomAccess))
    {
      paramInt = i - paramInt;
      while (paramInt < i)
      {
        localArrayList.add(paramList.get(paramInt));
        paramInt += 1;
      }
    }
    paramList = (Iterator)paramList.listIterator(i - paramInt);
    while (paramList.hasNext()) {
      localArrayList.add(paramList.next());
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T> List<T> takeLastWhile(@NotNull List<? extends T> paramList, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (paramList.isEmpty()) {
      return CollectionsKt.emptyList();
    }
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    while (localListIterator.hasPrevious()) {
      if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue())
      {
        localListIterator.next();
        int i = paramList.size() - localListIterator.nextIndex();
        if (i == 0) {
          return CollectionsKt.emptyList();
        }
        paramList = new ArrayList(i);
        while (localListIterator.hasNext()) {
          paramList.add(localListIterator.next());
        }
        return (List)paramList;
      }
    }
    return CollectionsKt.toList((Iterable)paramList);
  }
  
  @NotNull
  public static final <T> List<T> takeWhile(@NotNull Iterable<? extends T> paramIterable, @NotNull Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        break;
      }
      localArrayList.add(localObject);
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final boolean[] toBooleanArray(@NotNull Collection<Boolean> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    boolean[] arrayOfBoolean = new boolean[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfBoolean[i] = ((Boolean)paramCollection.next()).booleanValue();
      i += 1;
    }
    return arrayOfBoolean;
  }
  
  @NotNull
  public static final byte[] toByteArray(@NotNull Collection<Byte> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    byte[] arrayOfByte = new byte[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfByte[i] = ((Number)paramCollection.next()).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  @NotNull
  public static final char[] toCharArray(@NotNull Collection<Character> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    char[] arrayOfChar = new char[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfChar[i] = ((Character)paramCollection.next()).charValue();
      i += 1;
    }
    return arrayOfChar;
  }
  
  @NotNull
  public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Iterable<? extends T> paramIterable, @NotNull C paramC)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramC, "destination");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramC.add(paramIterable.next());
    }
    return paramC;
  }
  
  @NotNull
  public static final double[] toDoubleArray(@NotNull Collection<Double> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    double[] arrayOfDouble = new double[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfDouble[i] = ((Number)paramCollection.next()).doubleValue();
      i += 1;
    }
    return arrayOfDouble;
  }
  
  @NotNull
  public static final float[] toFloatArray(@NotNull Collection<Float> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    float[] arrayOfFloat = new float[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfFloat[i] = ((Number)paramCollection.next()).floatValue();
      i += 1;
    }
    return arrayOfFloat;
  }
  
  @NotNull
  public static final <T> HashSet<T> toHashSet(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return (HashSet)CollectionsKt.toCollection(paramIterable, (Collection)new HashSet(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 12))));
  }
  
  @NotNull
  public static final int[] toIntArray(@NotNull Collection<Integer> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    int[] arrayOfInt = new int[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfInt[i] = ((Number)paramCollection.next()).intValue();
      i += 1;
    }
    return arrayOfInt;
  }
  
  @NotNull
  public static final <T> List<T> toList(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      switch (localCollection.size())
      {
      default: 
        return CollectionsKt.toMutableList(localCollection);
      case 1: 
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        return CollectionsKt.listOf(paramIterable);
      }
      return CollectionsKt.emptyList();
    }
    return CollectionsKt.optimizeReadOnlyList(CollectionsKt.toMutableList(paramIterable));
  }
  
  @NotNull
  public static final long[] toLongArray(@NotNull Collection<Long> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    long[] arrayOfLong = new long[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfLong[i] = ((Number)paramCollection.next()).longValue();
      i += 1;
    }
    return arrayOfLong;
  }
  
  @NotNull
  public static final <T> List<T> toMutableList(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.toMutableList((Collection)paramIterable);
    }
    return (List)CollectionsKt.toCollection(paramIterable, (Collection)new ArrayList());
  }
  
  @NotNull
  public static final <T> List<T> toMutableList(@NotNull Collection<? extends T> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    return (List)new ArrayList(paramCollection);
  }
  
  @NotNull
  public static final <T> Set<T> toMutableSet(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection)) {
      return (Set)new LinkedHashSet((Collection)paramIterable);
    }
    return (Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet());
  }
  
  @NotNull
  public static final <T> Set<T> toSet(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      switch (localCollection.size())
      {
      default: 
        return (Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet(MapsKt.mapCapacity(localCollection.size())));
      case 1: 
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        return SetsKt.setOf(paramIterable);
      }
      return SetsKt.emptySet();
    }
    return SetsKt.optimizeReadOnlySet((Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet()));
  }
  
  @NotNull
  public static final short[] toShortArray(@NotNull Collection<Short> paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$receiver");
    short[] arrayOfShort = new short[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfShort[i] = ((Number)paramCollection.next()).shortValue();
      i += 1;
    }
    return arrayOfShort;
  }
  
  @NotNull
  public static final <T extends Comparable<? super T>> SortedSet<T> toSortedSet(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    return (SortedSet)CollectionsKt.toCollection(paramIterable, (Collection)new TreeSet());
  }
  
  @NotNull
  public static final <T> SortedSet<T> toSortedSet(@NotNull Iterable<? extends T> paramIterable, @NotNull Comparator<? super T> paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    return (SortedSet)CollectionsKt.toCollection(paramIterable, (Collection)new TreeSet(paramComparator));
  }
  
  @NotNull
  public static final <T> Set<T> union(@NotNull Iterable<? extends T> paramIterable1, @NotNull Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.addAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> List<List<T>> windowed(@NotNull Iterable<? extends T> paramIterable, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    if (((paramIterable instanceof RandomAccess)) && ((paramIterable instanceof List)))
    {
      paramIterable = (List)paramIterable;
      int k = paramIterable.size();
      localArrayList1 = new ArrayList((k + paramInt2 - 1) / paramInt2);
      int i = 0;
      while (i < k)
      {
        int m = RangesKt.coerceAtMost(paramInt1, k - i);
        if ((m < paramInt1) && (!paramBoolean)) {
          break;
        }
        ArrayList localArrayList2 = new ArrayList(m);
        int j = 0;
        while (j < m)
        {
          localArrayList2.add(paramIterable.get(j + i));
          j += 1;
        }
        localArrayList1.add((List)localArrayList2);
        i += paramInt2;
      }
      return (List)localArrayList1;
    }
    ArrayList localArrayList1 = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, false);
    while (paramIterable.hasNext()) {
      localArrayList1.add((List)paramIterable.next());
    }
    return (List)localArrayList1;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> List<R> windowed(@NotNull Iterable<? extends T> paramIterable, int paramInt1, int paramInt2, boolean paramBoolean, @NotNull Function1<? super List<? extends T>, ? extends R> paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    if (((paramIterable instanceof RandomAccess)) && ((paramIterable instanceof List)))
    {
      localObject = (List)paramIterable;
      int j = ((List)localObject).size();
      paramIterable = new ArrayList((j + paramInt2 - 1) / paramInt2);
      localObject = new MovingSubList((List)localObject);
      int i = 0;
      while (i < j)
      {
        ((MovingSubList)localObject).move(i, RangesKt.coerceAtMost(i + paramInt1, j));
        if ((!paramBoolean) && (((MovingSubList)localObject).size() < paramInt1)) {
          break;
        }
        paramIterable.add(paramFunction1.invoke(localObject));
        i += paramInt2;
      }
      return (List)paramIterable;
    }
    Object localObject = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, true);
    while (paramIterable.hasNext()) {
      ((ArrayList)localObject).add(paramFunction1.invoke((List)paramIterable.next()));
    }
    return (List)localObject;
  }
  
  @NotNull
  public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    (Iterable)new IndexingIterable((Function0)new Lambda(paramIterable)
    {
      @NotNull
      public final Iterator<T> invoke()
      {
        return receiver$0.iterator();
      }
    });
  }
  
  @NotNull
  public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> paramIterable, @NotNull Iterable<? extends R> paramIterable1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable1, "other");
    Iterator localIterator1 = paramIterable.iterator();
    Iterator localIterator2 = paramIterable1.iterator();
    paramIterable = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), CollectionsKt.collectionSizeOrDefault(paramIterable1, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable.add(TuplesKt.to(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable;
  }
  
  @NotNull
  public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> paramIterable, @NotNull Iterable<? extends R> paramIterable1, @NotNull Function2<? super T, ? super R, ? extends V> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramIterable1, "other");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Iterator localIterator1 = paramIterable.iterator();
    Iterator localIterator2 = paramIterable1.iterator();
    paramIterable = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), CollectionsKt.collectionSizeOrDefault(paramIterable1, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable.add(paramFunction2.invoke(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable;
  }
  
  @NotNull
  public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> paramIterable, @NotNull R[] paramArrayOfR)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramArrayOfR, "other");
    int i = 0;
    int j = paramArrayOfR.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), j));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(TuplesKt.to(localObject, paramArrayOfR[i]));
      i += 1;
    }
    return (List)localArrayList;
  }
  
  @NotNull
  public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> paramIterable, @NotNull R[] paramArrayOfR, @NotNull Function2<? super T, ? super R, ? extends V> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramArrayOfR, "other");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    int i = 0;
    int j = paramArrayOfR.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), j));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(paramFunction2.invoke(localObject, paramArrayOfR[i]));
      i += 1;
    }
    return (List)localArrayList;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> List<Pair<T, T>> zipWithNext(@NotNull Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt.emptyList();
    }
    List localList = (List)new ArrayList();
    Object localObject;
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
    {
      localObject = localIterator.next();
      localList.add(TuplesKt.to(paramIterable, localObject));
    }
    return localList;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> List<R> zipWithNext(@NotNull Iterable<? extends T> paramIterable, @NotNull Function2<? super T, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$receiver");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt.emptyList();
    }
    List localList = (List)new ArrayList();
    Object localObject;
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
    {
      localObject = localIterator.next();
      localList.add(paramFunction2.invoke(paramIterable, localObject));
    }
    return localList;
  }
}
